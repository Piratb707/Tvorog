import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.types.reply_keyboard import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from config import *
from Tex_Mes import *


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('database.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (id INTEGER PRIMARY KEY, name TEXT, phone TEXT)''')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
cursor.execute('''CREATE TABLE IF NOT EXISTS orders
                  (id INTEGER PRIMARY KEY, user_id INTEGER, status TEXT, item TEXT)''')

# –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
conn.close()


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
cancel_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
        ]
    ],
    resize_keyboard=True
)

button1 = KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ üçΩ")
button2 = KeyboardButton("–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑ üïµüèª‚Äç‚ôÇÔ∏è")
button3 = KeyboardButton("–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é üë®‚Äçüç≥")
button4 = KeyboardButton("–û –Ω–∞—Å ‚ùì")
button5 = KeyboardButton("–û—Ç–∑—ã–≤—ã ‚úçüèª")
button6 = KeyboardButton("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ–Ω—é üç≤")
button7 = KeyboardButton("C–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º ü§ô")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu_keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True
).row(button1, button2, button3).row(button4, button5, button6).row(button7)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class OrderForm(StatesGroup):
    item = State()
    phone = State()

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑\".\n–ß—Ç–æ–±—ã –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑\".", reply_markup=main_menu_keyboard)
    await message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"
@dp.message_handler(Text(equals="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ üçΩ"))
async def process_order_command(message: types.Message):
    await message.reply("–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –í–∞—Å –∏–Ω–µ—Ç—Ä–µ—Å—É–µ—Ç ?\n–ú–æ–∂–Ω–æ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º –º–µ–Ω—é", reply_markup=cancel_keyboard)
    await OrderForm.item.set()
    await message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=OrderForm.item)
async def process_order_item(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.reply("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard)
        await message.delete()
        return

    async with state.proxy() as data:
        data['item'] = message.text
        await message.reply(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890", reply_markup=cancel_keyboard)
        await OrderForm.next()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(state=OrderForm.phone)
async def process_order_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
        await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_menu_keyboard)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        cursor.execute("INSERT INTO orders (user_id, status, item) VALUES (?, ?, ?)", (message.from_user.id, "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", data['item']))
        order_id = cursor.lastrowid
        conn.commit()
        conn.close()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        await bot.send_message(chat_id=CHAT_ID, text=f"–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_id}\n\n–¢–æ–≤–∞—Ä: {data['item']}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['phone']}")

    # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.finish()
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é"
@dp.message_handler(Text(equals="–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é üë®‚Äçüç≥"))
async def process_actual_menu(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    await message.reply(MENU_PROD, parse_mode="HTML")
    await message.delete()

@dp.message_handler(Text(equals="–û—Ç–∑—ã–≤—ã ‚úçüèª"))
async def process_comments(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
    await message.reply(COMMENTS, parse_mode="HTML")
    await message.delete()

@dp.message_handler(Text(equals="–û –Ω–∞—Å ‚ùì"))
async def process_about_autors(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å
    await message.reply(DESCRIPTION, parse_mode="HTML")
    await message.delete()

@dp.message_handler(Text(equals="–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ–Ω—é üç≤"))
async def process_cpecial_menu(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    await message.reply(SPECIAL_MENU, parse_mode="HTML")
    await message.delete()

@dp.message_handler(Text(equals="C–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º ü§ô"))
async def process_cpecial_menu(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    await message.reply(CALL_SOUL, parse_mode="HTML")
    await message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑"
@dp.message_handler(Text(equals="–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑ üïµüèª‚Äç‚ôÇÔ∏è"))
async def process_track_command(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM orders WHERE user_id=?", (message.from_user.id,))
    orders = cursor.fetchall()
    conn.close()

    if not orders:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=main_menu_keyboard)
    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        text = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders:
            text += f"–ó–∞–∫–∞–∑ ‚Ññ{order[0]}\n–¢–æ–≤–∞—Ä: {order[3]}\n–°—Ç–∞—Ç—É—Å: {order[2]}\n\n"
        await message.reply(text, parse_mode=ParseMode.HTML, reply_markup=main_menu_keyboard)
    await message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏
@dp.message_handler()
async def echo_message(message: types.Message):
    await message.reply("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

